package actions

import (
	"github.com/Azure/spec-sla-bot/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (PullrequestAssignee)
// DB Table: Plural (pullrequest_assignees)
// Resource: Plural (PullrequestAssignees)
// Path: Plural (/pullrequest_assignees)
// View Template Folder: Plural (/templates/pullrequest_assignees/)

// PullrequestAssigneesResource is the resource for the PullrequestAssignee model
type PullrequestAssigneesResource struct {
	buffalo.Resource
}

// List gets all PullrequestAssignees. This function is mapped to the path
// GET /pullrequest_assignees
func (v PullrequestAssigneesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	pullrequestAssignees := &models.PullrequestAssignees{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all PullrequestAssignees from the DB
	if err := q.All(pullrequestAssignees); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, pullrequestAssignees))
}

// Show gets the data for one PullrequestAssignee. This function is mapped to
// the path GET /pullrequest_assignees/{pullrequest_assignee_id}
func (v PullrequestAssigneesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PullrequestAssignee
	pullrequestAssignee := &models.PullrequestAssignee{}

	// To find the PullrequestAssignee the parameter pullrequest_assignee_id is used.
	if err := tx.Find(pullrequestAssignee, c.Param("pullrequest_assignee_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, pullrequestAssignee))
}

// New renders the form for creating a new PullrequestAssignee.
// This function is mapped to the path GET /pullrequest_assignees/new
func (v PullrequestAssigneesResource) New(c buffalo.Context) error {
	return c.Render(200, r.Auto(c, &models.PullrequestAssignee{}))
}

// Create adds a PullrequestAssignee to the DB. This function is mapped to the
// path POST /pullrequest_assignees
func (v PullrequestAssigneesResource) Create(c buffalo.Context) error {
	// Allocate an empty PullrequestAssignee
	pullrequestAssignee := &models.PullrequestAssignee{}

	// Bind pullrequestAssignee to the html form elements
	if err := c.Bind(pullrequestAssignee); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(pullrequestAssignee)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, pullrequestAssignee))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "PullrequestAssignee was created successfully")

	// and redirect to the pullrequest_assignees index page
	return c.Render(201, r.Auto(c, pullrequestAssignee))
}

// Edit renders a edit form for a PullrequestAssignee. This function is
// mapped to the path GET /pullrequest_assignees/{pullrequest_assignee_id}/edit
func (v PullrequestAssigneesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PullrequestAssignee
	pullrequestAssignee := &models.PullrequestAssignee{}

	if err := tx.Find(pullrequestAssignee, c.Param("pullrequest_assignee_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, pullrequestAssignee))
}

// Update changes a PullrequestAssignee in the DB. This function is mapped to
// the path PUT /pullrequest_assignees/{pullrequest_assignee_id}
func (v PullrequestAssigneesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PullrequestAssignee
	pullrequestAssignee := &models.PullrequestAssignee{}

	if err := tx.Find(pullrequestAssignee, c.Param("pullrequest_assignee_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind PullrequestAssignee to the html form elements
	if err := c.Bind(pullrequestAssignee); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(pullrequestAssignee)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, pullrequestAssignee))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "PullrequestAssignee was updated successfully")

	// and redirect to the pullrequest_assignees index page
	return c.Render(200, r.Auto(c, pullrequestAssignee))
}

// Destroy deletes a PullrequestAssignee from the DB. This function is mapped
// to the path DELETE /pullrequest_assignees/{pullrequest_assignee_id}
func (v PullrequestAssigneesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty PullrequestAssignee
	pullrequestAssignee := &models.PullrequestAssignee{}

	// To find the PullrequestAssignee the parameter pullrequest_assignee_id is used.
	if err := tx.Find(pullrequestAssignee, c.Param("pullrequest_assignee_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(pullrequestAssignee); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "PullrequestAssignee was destroyed successfully")

	// Redirect to the pullrequest_assignees index page
	return c.Render(200, r.Auto(c, pullrequestAssignee))
}
